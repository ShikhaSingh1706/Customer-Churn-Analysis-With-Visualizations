# -*- coding: utf-8 -*-
"""Customer_Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1psEmajJQm0juy3NUfxLz6LZSbEQ47_Qs
"""

pip install pandas

pip install matplotlib

pip install numpy

pip install seaborn

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

tel_cust=pd.read_csv('/content/WA_Fn-UseC_-Telco-Customer-Churn.csv')
tel_cust.head()

tel_cust.info()

"""Replace blanks with 0 as tenure is 0 and no total charges are recorded

Change datatype from object to float
"""

tel_cust['TotalCharges']=tel_cust['TotalCharges'].replace(" ","0")
tel_cust['TotalCharges']=tel_cust['TotalCharges'].astype('float')

"""isnull is used to check null values ,if value is null it will return 'True' otherwise 'False'"""

tel_cust.isnull()

"""sum() is used to count number of null values column wise

"""

tel_cust.isnull().sum()

tel_cust.describe()

"""duplicated is used to check number of duplicate values"""

tel_cust.duplicated().sum()

"""Check duplicate value based on primary key"""

tel_cust['customerID'].duplicated().sum()

"""we have converted 1 and 0 value to yes and no to make it easier to understand

"""

def conv(value):
  if value== 1:
    return 'Yes'
  else:
    return 'No'
tel_cust['SeniorCitizen']=tel_cust['SeniorCitizen'].apply(conv)

tel_cust.head(50)

ax=sns.countplot(x='Churn', data=tel_cust)
ax.bar_label(ax.containers[0])
plt.title("Count of Customers by Churn")
plt.show()

gb=tel_cust.groupby("Churn").agg({'Churn':"count"})
gb



plt.figure(figsize=(4,5))  # define size of chart
plt.pie(gb['Churn'],labels=gb.index,autopct='%1.2f%%') #define =col, label, percentage
plt.title('Percentage of Churned Customer')
plt.show()

"""From the above pie chart we can conclude that 26.54 % of customer have churned out.

**Now lets explore the reason behind it**
"""

plt.figure(figsize=(5,5))
sns.countplot(x='gender', data=tel_cust, hue='Churn')
plt.title("Churn By Gender")
plt.show()

plt.figure(figsize=(5,5))
ax=sns.countplot(x='SeniorCitizen', data=tel_cust, hue='Churn')
ax.bar_label(ax.containers[0])
plt.title("Churn By SeniorChitizen")
plt.show()

grouped = tel_cust.groupby(['SeniorCitizen', 'Churn']).size().unstack(fill_value=0)
percentages = grouped.div(grouped.sum(axis=1), axis=0) * 100

# Plot
fig, ax = plt.subplots(figsize=(5, 5))
bottom_values = [0] * len(percentages)

for churn_status in percentages.columns:
    ax.bar(
        percentages.index,
        percentages[churn_status],
        label=churn_status,
        bottom=bottom_values
    )
    bottom_values += percentages[churn_status]

# Add percentage labels
for i, (index, row) in enumerate(percentages.iterrows()):
    cumulative = 0
    for col in percentages.columns:
        height = row[col]
        if height > 0:
            ax.text(
                x=index,
                y=cumulative + height / 2,
                s=f"{height:.1f}%",
                ha='center',
                va='center',
                color='white' if height > 15 else 'black',
                fontsize=10
            )
        cumulative += height

# Customize the plot
ax.set_title("Churn by Senior Citizen (Percentage)", fontsize=14)
ax.set_xlabel("Senior Citizen")
ax.set_ylabel("Percentage")
ax.legend(title="Churn")
plt.tight_layout()
plt.show()

"""camparatively a greated percentage  of people in senior cicitizen category have churned out."""

plt.figure(figsize=(12,4))
sns.histplot(x='tenure',data=tel_cust,bins=72,hue="Churn")
plt.show()

"""people who have used our services for long time have stayed and people who have used our services for 1 or 2 months have churned."""

plt.figure(figsize=(5,5))
ax=sns.countplot(x='Contract', data=tel_cust, hue='Churn')
ax.bar_label(ax.containers[0])
plt.title("Count of People on Contract basis on the basis of churn")
plt.show()

"""people who have month to month contract are likely to churned then those who have 1 or 2 year contract period.

"""

tel_cust.columns.values

columns = [
    'PhoneService', 'MultipleLines', 'InternetService',
    'OnlineSecurity', 'OnlineBackup', 'DeviceProtection',
    'TechSupport', 'StreamingTV', 'StreamingMovies'
]

# Set the figure size
num_cols = 3  # Number of columns in the subplot grid
num_rows = (len(columns) + num_cols - 1) // num_cols  # Calculate number of rows
fig, axes = plt.subplots(num_rows, num_cols, figsize=(15, num_rows * 4))

# Flatten axes for easy iteration
axes = axes.flatten()

# Plot count plots
for i, column in enumerate(columns):
    sns.countplot(x=column, data=tel_cust, ax=axes[i],hue=tel_cust['Churn'])
    axes[i].set_title(f'Count Plot for {column}')
    axes[i].set_xlabel(column)
    axes[i].set_ylabel('Count')

# Remove extra axes
for j in range(len(columns), len(axes)):
    fig.delaxes(axes[j])

# Adjust layout
plt.tight_layout()
plt.show()

"""The analysis reveals key churn trends across various services. Customers without optional add-ons like OnlineSecurity, TechSupport, and DeviceProtection show higher churn rates, while fiber optic users in InternetService also tend to churn more than DSL users. Essential services like PhoneService have high adoption but still exhibit some churn. These findings highlight the need to focus on upselling optional services and improving retention strategies for fiber optic customers. Further analysis is recommended to quantify feature impacts and guide targeted retention efforts."""

plt.figure(figsize=(9,5))
ax=sns.countplot(x='PaymentMethod', data=tel_cust, hue='Churn')
ax.bar_label(ax.containers[0])
plt.title("Count of Customer Payment Method")
plt.show()

"""Customer is likey to churned when they are using electronic check.

"""



